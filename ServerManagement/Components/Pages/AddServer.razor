@page "/servers/add"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject IServerEFRepository ServerEFRepository
@inject IServerAPIRepository ServerAPIRepository

<title>Add Server</title>

<h3>Add Server</h3>

<br/>

@if(server != null)
{
	<div>
		<EditForm Model="server" OnValidSubmit="OnSubmit">
			<DataAnnotationsValidator></DataAnnotationsValidator>
			<!--Field for Server Name-->
			<div class="row mb-3">
				<div class="col-2">
					<label class="col-form-label">Name</label>
				</div>
				<div class="col-6">
					<InputText @bind-Value="server.ServerName" class="form-control"></InputText>
				</div>
				<div class="col">
					<ValidationMessage For="() => server.ServerName"></ValidationMessage>
				</div>
			</div>

			<!--Field for Server City-->
			<div class="row mb-3">
				<div class="col-2">
					<label class="col-form-label">City</label>
				</div>
				<div class="col-6">
					<InputText @bind-Value="server.ServerCity" class="form-control"></InputText>
				</div>
				<div class="col">
					<ValidationMessage For="() => server.ServerCity"></ValidationMessage>
				</div>
			</div>

			<!--Field for making the server online or offline-->
			<div class="row mb-3">
				<div class="col-2">
					<label class="col-form-label">Online</label>
				</div>
				<div class="col-6">
					<InputCheckbox @bind-Value="server.IsOnline" class="form-check"></InputCheckbox>
				</div>
			</div>

			<br />

			<button class="btn btn-primary" type="submit">Save</button>

		</EditForm>

	</div>
}


@code
{
	private Server? server { get; set; } = new Server { IsOnline = false };

	private async Task OnSubmit()
	{
		if(server != null)
		{
			await ServerAPIRepository.AddServerAsync(server);

			NavigationManager.NavigateTo($"/servers/back_from/{this.server.ServerCity}");
		}
		
	}
}
