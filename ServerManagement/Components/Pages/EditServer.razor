@page "/servers/edit/{id:int}"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject IServerEFRepository ServerEFRepository
@inject IServerAPIRepository ServerAPIRepository

@inject IJSRuntime JSRuntime

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"
				ConfirmExternalNavigation = "true"> 

</NavigationLock>

<title>Edit-Server</title>

<h3>Edit Server</h3>

<br/>
<br/>

@if (server != null)
{
	<EditForm Model="server" OnValidSubmit="OnSubmit">

		<DataAnnotationsValidator></DataAnnotationsValidator>

		<InputNumber @bind-Value="server.ServerId" hidden></InputNumber>

		<FieldComponent Label="Name">
			<Control>
				<InputText @bind-Value="server.ServerName" class="form-control"></InputText>
			</Control>

			<ValidationControl>
				<ValidationMessage For="() => server.ServerName"></ValidationMessage>
			</ValidationControl>
		</FieldComponent>

		<FieldComponent Label="City">
			<Control>
				<InputText @bind-Value="server.ServerCity" class="form-control"></InputText>
			</Control>

			<ValidationControl>
				<ValidationMessage For="() => server.ServerCity"></ValidationMessage>
			</ValidationControl>
		</FieldComponent>

		<FieldComponent Label="Online">
			<Control>
				<InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
			</Control>
		</FieldComponent>
		
		<br/>

		<button class="btn btn-primary" type="submit">Update</button>
		&nbsp;
		<a href="/servers" class="btn btn-primary">Close</a>

	</EditForm>
}

<br/>


@code {
	[Parameter]
	public int Id { get; set; }

	Server? server { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		server ??= await ServerAPIRepository.GetServerByIdAsync(this.Id);
	}

	private async Task OnSubmit()
	{
		if(server != null)
		{
			await ServerAPIRepository.UpdateServerAsync(server.ServerId, server);

			NavigationManager.NavigateTo($"/servers/back_from/{this.server.ServerCity}");
		}
	}

	private async Task OnBeforeInternalNavigation(LocationChangingContext lcc)
	{
		if(server is not null)
		{
			if (!lcc.TargetLocation.Equals($"/servers/back_from/{this.server.ServerCity}") && !lcc.TargetLocation.Equals("/servers"))
			{
				var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Changes you made may not be saved!");


				if (!confirmed)
				{
					lcc.PreventNavigation();
				}
			}
		}
		
	}

}
