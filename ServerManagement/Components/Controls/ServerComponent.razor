
@inject NavigationManager NavMan
@inject IServerEFRepository ServerEFRepository
@inject IServerAPIRepository ServerAPIRepository


@if(server != null)
{
	<tr class="mb-2" style="background-color:@GetBackgroundColor()">
		<td>
			@server.ServerName
		</td>

		<td>
			@server.ServerCity
		</td>

		<td style="color:@((server.IsOnline? "green" : "red"))">
			@(server.IsOnline ? "Online" : "Offline")
		</td>

		<td>
			@if(server.IsOnline)
			{
				Random random = new Random();

				<text>User: @random.Next(100) </text>
			}
			else
			{
				<text>N/A</text>
			}
		</td>

		<td>
			@if (server.IsOnline)
			{
				<button class="btn btn-outline-danger" @onclick="ToggleOnOff">Turn Off</button>
			}
			else
			{
				<button class="btn btn-outline-success" @onclick="ToggleOnOff">Turn On</button>
			}
			&nbsp;
			<a href="/servers/edit/@server.ServerId" class="btn btn-outline-primary ms-2">Edit</a>
			&nbsp;
			<button class="btn btn-outline-danger" @onclick="@(() => {DeleteServer(server.ServerId);})">Delete</button>

		</td>
	</tr>
}


@code {
	[Parameter]
	public Server? server{ get; set; }

	[Parameter]
	public EventCallback<int> DeleteServerCallback{ get; set; }

	[CascadingParameter(Name ="selectedCity")]
	private string? selectedCity{ get; set; }

	private void DeleteServer(int serverId)
	{
		DeleteServerCallback.InvokeAsync(serverId);
	}

	private async void ToggleOnOff()
	{
		if (server is not null)
		{
			server.IsOnline = !server.IsOnline;

			await ServerAPIRepository.UpdateServerAsync(server.ServerId, server);
		}

	}

	private string GetBackgroundColor()
	{
		switch(selectedCity)
		{
			case "Toronto": return "powderblue";
			case "Montreal": return "lightgray";
			case "Ottawa": return "palegreen";
			case "Calgary": return "pink";
			case "Halifax": return "white";
			default:
				return "white";
		}
	}
}
